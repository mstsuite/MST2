.\" @(#)fpp.1 1.1 96/06/05 SMI; from S5R3
.na
.TH fpp 1 "19 Aug 1996"                    
.SH NAME
fpp \- the Fortran language preprocessor for FORTRAN 77 and Fortran 90.
.SH SYNOPSIS
.B fpp 
[
.B options
] [
.I input-file
[
.I output-file
] ]
.SH DESCRIPTION
.B fpp 
is the  preprocessor  for FORTRAN 77 and Fortran  90.
.B fpp  
optionally  accepts  two  filenames  as   arguments.
input-file and output-file  are, respectively, the  input file read
and the output file written by the preprocessor.  By default 
standard input and output are used.
.B fpp 
should be used instead of the cpp preprocessor
with the Sun FORTRAN 77 compiler.
.SH OPTIONS
.TP
.BI \-c_com = {yes|no}
By default, C style 
.B comments 
are recognized. Turn this off by specifying
.I -c_com=no
.TP
.BI \-D name
Define the preprocessor variable
.I name 
as 1 (one). This
is the same as if a
.BI \-D name=1
option appeared on the
.B fpp 
command line, or as if a
.RS
.IP
.BI #define " name " 1 
.RE
.IP
line appeared in the source file, which is processed by 
.B fpp.
.br
.ne 5

.TP
.BI \-D name = def
Define
.I name
as if by a
.B #define
directive.
This is the same as if a
.RS
.IP
.BI #define " name " def
.RE
.IP
line appeared in the source file that 
.B fpp
is processing.
The
.B \-D
option has lower precedence than the
.B \-U
option.
That is, if the same name is used in both a
.B \-U
option and a
.B \-D
option, the name will be undefined regardless of the order of the options.
.TP
.BI \-fixed
Assumes fixed format input source.
.TP
.BI \-free
Assumes free format input source.
.TP
.BI \-I directory
Insert 
.I directory
into the search path for
.B #include
files with names not beginning with
.RB  ` / '.
.I directory
is inserted ahead of the
standard list of ``include'' directories.
Thus,
.B #include
files with names enclosed in
double-quotes (\f3"\f1)
are searched for first in the directory of the file with the
.B #include
line, then in directories named with
.B \-I
options, and lastly, in directories from the standard list.
For
.B #include
files with names enclosed in angle-brackets
.RB  ( <\|> ),
the directory of the file with the
.B #include
line is not searched.
.TP
.BI \-M
Generate a list of makefile dependencies and
.B write
them to the standard output. This list
indicates that the object file which would be
generated  from the input file depends on the
input file  as  well  as  the  include  files
referenced.
.TP
.BI \-macro = {yes|no_com|no}
By default, macros are expanded 
.B everywhere.
Turn off macro expansion in comments by specifying
.I -macro=no_com
and turn off macro expansion all together by specifying
.I -macro=no
.TP
.BI \-P  
Do not put line numbering directives to the output file. This directive appears
as
.RS
\f2#line-number file-name\f1
.RE
.TP
.BI \-U name
Remove any initial definition of
.IR name ,
where
.I name
is a 
.B fpp
variable that is predefined by a particular preprocessor.
Here is a partial list of symbols that may be predefined, depending upon
the architecture of the system:
.RS
.RS
.TP 20
Operating System:
.PD 0
.BR unix ,
.BR __unix ,
.BR and __SVR4
.TP 20
Hardware:
.BR sun ,
.BR __sun ,
.BR sparc ,
.BR and __sparc
.PD
.RE
.RE
.TP
.BI \-undef
Remove initial definitions for all predefined symbols.
.TP
.BI \-w0
Don't output warnings from
.B fpp 
to stderr.
.TP
.B \-Xu 
Convert upper-case letters 
.B to 
lower-case, except within character-string constants. The default is 
to not convert upper-case letters  to  lower-case.
.TP
.BI \-Xw
For fixed form source files (See below)
.B fpp
assumes that the symbol ' ' (space) is insignificant.
By default for this form the 'space' symbol is the
delimiter of tokens.
.TP
.BI \-Y directory
Use the specified 
.BI " directory "
in place of the 
standard list of directories when searching for
.B#include
files.
.TP
.B fpp 
also understands some FORTRAN 77 compiler options (See f77(1)):
.TP
.BI \-e  
Accept extended source lines, up to 132 characters
long.
.TP
.BI \-w 
Do not output warnings to stderr.
.SH USAGE
.SS Source files
.LP
.B fpp
operates on both fixed and free form
source files. Files with '.F' extension are assumed to be in
fixed form, and files with '.F90' extensions (and all others) are 
assumed to be in free form by default. There is the '-fixed' option 
for using fixed form in Fortran 90. 
.B fpp 
recognizes the tab format of a source line when in 
fixed mode.
.LP
A source file may contain 
.B fpp 
tokens. 
.B fpp 
tokens are close
to those of Fortran. They are:
.RS
.TP
- 
fpp directive names.
.TP
- 
symbolic names including Fortran keywords. fpp
permits all symbols in names that Fortran does.
.TP
- 
constants. Integer, real, double and quadruple
precision, binary, octal, hexadecimal including
alternate notation, character and hollerith.
.TP
- 
comments. There are Fortran comments and 
.B fpp
comments.
.TP
- 
others. Special characters, space, tab, newline, etc.
.RE
.SS Output
Output consists of a modified copy of the input,
plus lines of the form:

     \f2#line_number  file_name\f1
.LP
inserted to indicate the original source line number and filename of
the output line that follows.
There is the '-P' option (See above) which disables the generation
of these lines.
.SS Directives
Syntax and semantics of 
.B fpp 
directives are the same as 
.B cpp
directives (See cpp(1)).
.LP
All 
.B fpp 
directives  start with the hash symbol (#)  as the
first character on a line. White space (SPACE or TAB
characters) can  appear after the initial '#' for proper
indentation.  The  directives can be divided  into the following
groups:  
.LP
- macro definitions;
.LP
- conditional source code selection;
.LP
- inclusion of external files;
.LP
- line control.
.SS Macro definition.
.LP
The #define directive is used to define both simple string variables and 
more complicated macros:
.LP
\f3#define \f2name  token-string\f1
.LP
This is the definition of a 
.B fpp 
variable. Wherever 'name' appears in the source lines 
following the definition, 'token-string' will be substituted for 'name'.
.LP
\f3#define \f2name(argument [, argument] ...  )  token-string\f1
.LP
This is the definition of a function-like macro.
Occurrences of the macro 'name' followed by
the comma-separated list of arguments within parentheses
are substituted by the token string
produced from the macro definition. Every occurrence
of an argument identifier from the macro definition's arguments list is
substituted by the token sequence representing the
corresponding macro actual argument.
.LP
In these definitions, spaces between the macro name and
the '(' symbol are prohibited to prevent the
directive being interpreted as a 
.B fpp 
variable
definition with the rest of the line beginning
with the '(' symbol being interpreted as a token-string.
.LP
\f3#undef \f2name\f1
.LP
Remove any definition for 'name' (produced by 'D' options,
#define directives or by default). No additional tokens 
are permitted on the directive line after the name.
.SS Including External Files.
There are two forms of file inclusion:
.LP
\f3#include "\f2filename\|\f3"\f1
.LP
.BI #include " " < filename >
.LP
Read in the contents of filename at this location.  
The lines read in from the file are processed by
.B fpp 
as  if it were a part
of the current file. 
.LP
When the  <filename> notation
is  used, filename is only searched for in the
standard ``include'' directories.  See the 'I' and 'Y' 
options above for more detail.
No additional tokens are permitted in the directive
line after the final  `"'  or `>'.
.SS Line control.
.LP
\f2#line-number "filename"\f1
.LP
Generate line control information for the next  pass
of the compiler. The integer-constant is  interpreted
as the line number of  the next line and the filename
is  interpreted  as the name of the file from where it comes.
If "filename" is not given, the current filename is
unchanged.  
.SS Conditional selection of source text.
There are two forms of conditional selection of source text
.LP
.TP 
1) 
      \f3#if \f2condition_1\f1
           block_1
      \f3#elif \f2condition_2\f1
           block_2
      \f3#else\f1 
           block_n
      \f3#endif\f1
.TP 
2)
      \f3#ifdef \f2name\f1
           block_1
      \f3#elif \f2condition\f1
           block_2
      \f3#else\f1
           block_n
      \f3#endif\f1
.TP
or
      \f3#ifndef \f2name\f1
           block_1
      \f3#elif \f2condition\f1
           block_2
      \f3#else\f1
          block_n
      \f3#endif\f1
.LP
else- and elif-part are optional.  There may be more than
one elif-part. Condition is an expression involving 
.B fpp
constants, macros  and  
intrinsic  functions. 
Condition expressions are similar to  cpp expressions, and may
contain any cpp operations and operands with the exception
of c long, octal and hexadecimal constants. Additionally,
.B fpp 
will accept and evaluate Fortran logical operations .NOT. .AND.
\&.OR. .EQV. .NEQV. .GT. .LT. .LE. .GE. etc. and logical
constants .TRUE. .FALSE.
.SH Details
.SS Scope of macro or variable definitions.
The scope of a definition begins from the place of its
definition and encloses all the source lines (and source lines
from included files) from that definition line
to the end of the current file. 
.LP
There are the following exceptions to the scope effected by
an fpp definition:
.LP
- files included by Fortran INCLUDE statements;
.LP
- fpp and Fortran comments;
.LP
- IMPLICIT single letter specifications;
.LP
- FORMAT specifications;
.LP
- numeric, typeless and character constants.
.LP
The scope of the macro effect can be limited by means
of the #undef directive.
.SS End of macro definition
Macro definition can be of any length and is limited
only by the 'newline' symbol. A Macro can be defined in
multiple lines. A Macro can be continued to the next line
with the insertion of '\e'. So, the occurrence of a 'newline'
without a macro-continuation signifies the end of the macro
definition.
.br
.sp
For example:
.br
#define long_macro_name(x,\e
.br
y) x*y
.SS Function-like macro definition
The number of macro call arguments should be the same
as the number of arguments in the corresponding macro
definition. An error is flagged if they don't.
.SS Cancelling macro definitions of both kinds
\f3#undef \f2name\f1
.LP
After this directive,  'name' would not interpreted by
.B fpp
as a macro or variable name. If this name has not been defined
earlier as a macro name, then the given directive has
no effect
.SS Conditional source code selection
.LP
- Constant-expression
.LP
Subsequent lines up to the matching #else, #elif, or
#endif directive, appear in the output only if
their constant-expression yields a true value.
.LP
The lines following the #elif directive appear 
in the output only if all of the following conditions
hold:
.RS
.TP
-
The constant-expression  in the   preceding
#if directive evaluated to .FALSE.
.BI or
the name in the preceding #ifdef directive
is not defined
.BI or
the name in the preceding #ifndef directive
is defined.
.TP
-
The constant-expression in all intervening 
#elif  directives  evaluated to .FALSE.
.TP
-
The  current constant-expression   evaluates
to .TRUE.
.RE
.LP
If  the  constant-expression  evaluates to .TRUE.,
subsequent #elif  and  #else directives are ignored
up to the matching #endif.  Any  constant-expression
allowed in an #if  directive is allowed in  an #elif
directive.
.LP
The intrinsic function `defined' can be used in a
constant-expression also.
.LP
The following items are permitted:
.RS
.TP
-
C language operations: <, >, ==, !=, >=, <=, 
+, -, /, *, %, <<, >>,
&,  ~, |, &&, ||
They are interpreted by
.B fpp
in accordance to the C language
semantics (this facility is provided for compatibility with
"old" Fortran programs using cpp)
.TP
-
Fortran language 
operations: .AND., .OR., .NEQV., .XOR., .EQV., .NOT.
\&, .GT., .LT., .LE., .GE., .NE., .EQ., ** (power).
.TP
-
Fortran logical constants: .TRUE. , .FALSE.
.LP
Only these items, integer constants, and names 
can be used within a constant-expression. Names
which have not been defined with the help of the 'D' 
option, a #define directive or by default, 
get 0 as the value.
The C operation '!=' (not equal) can be used in #if or
#elif directive, but NOT in #define directive, where
the symbol '!' is considered as the Fortran comment symbol.
.RE
.TP
.BI #ifdef " name "
Subsequent lines up to the matching  #else, #elif,
or #endif appear in the output only if the name has been 
defined, either by a #define directive or by the 'D' 
option, and in the absence of an intervening #undef
directive. No additional tokens are permitted on the
directive line after name.
.TP
.BI #ifndef " name "
Subsequent lines up to the matching  #else,   #elif,
or #endif appear in the output only  if name has not 
been defined, or if its definition has been removed
with an #undef directive. No additional tokens  are
permitted on the directive line after name.
.TP
.BI #elif " constant-expression ".
Any number of #elif directives may  appear   between
an #if,  #ifdef, or #ifndef directive and a matching
#else or #endif  directive.
.TP
.BI #else
This inverts the sense of the conditional directive 
otherwise in effect. If the preceding conditional would
indicate that lines are to be included, then lines 
between the #else and the matching #endif are ignored.
If the preceding conditional indicates that lines would
be ignored, subsequent lines are included in the
output.
.BR
Conditional directives and corresponding #else directives 
can be nested.
.TP
.BI #endif
End a section of lines begun by one of the conditional 
directives  #if, #ifdef, or #ifndef.
Each such directive must have a matching #endif.
.SS Including External Files 
Is the same as it is for cpp.
Files are searched as follows:
.LP
for  #include "file_name":
.RS
.TP
-
in the directory, in which the processed file has been found;
.TP
-
in the directories specified by the -I option;
.TP
-
in the default directory.
.RE
.LP
for #include <file_name>:
.RS
.TP
-
in the directories specified by the -I option;
.TP
-
in the default directory.
.RE
.LP
.B fpp
directives (beginning with the # symbol in the first
position of lines) can be placed anywhere in a source code,
in particular before a Fortran continuation line.
The only exception is the prohibition of 
.B fpp
directives
within a macro call divided on several lines by means
of continuation symbols.
.LP
.SS Comments
.LP
.B fpp 
permits comments of two kinds:
.LP
1) Fortran language comments.
A source line containing one of the 
symbols 'C', 'c', '*', 'd' or 'D' in the first position,
is considered as a comment line. Within such lines
macro expansions are not performed.
The '!' symbol is interpreted as the beginning of a
comment extending to the end of the line. The only exception
is the case when this symbol occurs within a
constant-expression in #if and #elif directives
(See above). 
.LP
2) 
.B fpp 
comments enclosed in the '/*' and '*/' parasymbols.
They are excluded from the output and 
macro expansions are not performed within these symbols.        
.B fpp
comments can be nested and for each parasymbol '/*'
there must be a corresponding parasymbol '*/'.
.B fpp 
comments are suitable for excluding the compilation of
large portions of source instead of commenting every line
with Fortran comment symbols.
.LP
.SS Intrinsic functions
.LP
The intrinsic function
.LP
\f3defined(\f2name\f3)\f1   or \f3defined \f2name\f3 \f1
.LP
Returns:
.LP
  .TRUE. - if name is defined as a macro.
.LP
  .FALSE.- if the name is not defined.
.LP
.SS Macro expansion
.LP
If, during expansion of a macro, the column width of a
line exceeds column 72 (for the fixed format) or column 132
(for the free format),
.B fpp 
inserts appropriate continuation
lines.
.LP
In the fixed form there is limitation on macro expansions
in label fields (positions 1-5):
.RS
.TP
-
a macro call (together with possible arguments) should not
extend more than the column 5 position;
.TP
-
a macro call whose name begins with one of the Fortran
comment symbols is considered as a part of a comment;
.TP
-
a macro expansion may produce a text extending beyond the
column 5 position. In such a case a warning will be issued.
.RE
.LP
In the fixed form when the '-Xw' option has been specified
an ambiguity may appear if a macro call occurs in a statement
position and a macro name begins or coincides with a Fortran
keyword. For example, in the following text:
.LP
  #define callp(x)   call f(x)
          call p(0)     
.LP
.B fpp 
can not determine with certainty how to interpret the 'call p'
token sequence. It could be considered as a macro name. 
The current implementation does the following:
.RS
.TP
-
the longer identifier is chosen (callp in this case);
.TP
-
from this identifier the longest macro name or keyword
is extracted;
.TP
-
if a macro name has been extracted a macro expansion is
performed. If the name begins with some keyword
.B fpp
outputs an appropriate warning;
.TP
-
the rest of the identifier is considered as a whole
identifier.
.RE
.LP
In the above example the macro expansion would be performed
and the following warning would be output:
.LP
warning: possibly incorrect substitution of macro callp
.LP
It should be noted that this situation appears only when
preprocessing a fixed format source code and when the
space symbol is not interpreted as a token delimiter.
It should be said also that if a macro name coincides
with a keyword beginning part, as in the following case:
.LP
     #define INT    INTEGER*8
             INTEGER k
.LP
then in accordance with the described algorithm, the
INTEGER keyword will be found earlier than the INT
macro name. Thus, there will be no warning when
preprocessing such a macro definition.    
.SH DIAGNOSTICS 
.LP
There are three kinds of diagnostic messages:
.RS
.TP
-
warnings.
preprocessing of source code is continued and
the return value remains to be 0.
.TP
-
errors.
.B fpp 
continues preprocessing but sets the return
code to a nonzero value, namely number of errors. 
.TP
-
fatal error.
.B fpp 
cancels preprocessing and returns a nonzero
return value.  
.RE
.LP         
The messages produced by
.B fpp 
are intended to be self-explanatory. 
The line number and filename where the error
occurred are printed along with the diagnostic.
.SH SEE ALSO
.LP
cpp(1), f77(1), f90(1)


