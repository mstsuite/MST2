#!/bin/sh
# M. Daene, Oct. 2011, ORNL
# version 1.01

if [ ! -z $1 ] ; then
  if [ $1 == "--help" ] ; then
    echo "usage: $0   or"
    echo "       $0  <id of atom>"
    exit 0
  fi
fi

CHARGETABLEFILE=ChargeTable
GNUPLOTFILE=moments_plot.gp
DATA_FILE_PREFIX=moments
SPECIFIC_ID=$1
NBINS=50



###############################################################################
###############################################################################
###############################################################################
###############################################################################

cat $CHARGETABLEFILE  | awk \
-v gnuplotfile=$GNUPLOTFILE \
-v datafileprefix=$DATA_FILE_PREFIX \
-v specificid=$SPECIFIC_ID \
-v nbins=$NBINS \
' 
BEGIN{
 rmode=0
 myiteration=0
 myl=0
 SUBSEP="@"
 lastiteration=0
 lastindfile=0
# gnuplotfile="moments_plot.gp"
 
 if ( specificid == "" ) {
            doall=1  }
       else {doall=0
 }


} # end BEGIN


  function max(a,b)   {
        if(a=="") {return(b)}
        if(b=="") {return(a)}
        return( ( a > b ) ? a : b ) }

  function min(a,b)   {
        if(a=="") {return(b)}
        if(b=="") {return(a)}
        return( ( a < b ) ? a : b ) }

{
 if (match($0,"# ITERATION :"))
   {
     myl=NR


     if ( $4-lastindfile < 0 ) {
         inc=1} else {
         inc=$4-lastindfile
      } 
     if (inc < 1 ) {inc=1}
#     printf("inc=%d\n",inc)

     myiteration=myiteration+inc;


     lastindfile=$4

     rmode=1
     myid=0
#     if ( myiteration > 1 ) {printf("\n")}

     idmyit=sprintf("%010d ",myiteration)
     iterationlist[idmyit]=myiteration
     lastiteration=myiteration


     printf("found new iteration: %-6d    [iteration in file=%-6d]\n",myiteration,$4)
   }


 if (rmode == 1 && NR > myl+3 )
 {
    if (match($0,"====")) { 
       rmode=0
#       printf("\n")
    } 

    if ( rmode == 1 )
    {
#########    reading data  #########
#    printf("%s",$1)
    myid++


    atom= $1
    id  = $2
    Q   = $3
    Qmt = $4
    Qvp = $5
    dQ  = $6
    Mmt = $7
    Mvp = $8

    if ( doall == 1 ) { doit=1} else {
        if (id == specificid ) {doit=1} else {doit=0}
    }
    

    if ( doit == 1 ) {
       idc=sprintf("%010d ",id)
       atomlist[atom]=atom
       idlistnum[idc]=id
       idlist[id]=atom
       momentlist[id,myiteration]=Mmt
       globalMin[atom]=min(globalMin[atom],Mmt)
       globalMax[atom]=max(globalMax[atom],Mmt)
    }
######### reading data end #########
    }

 }  # end read data mode



}







################################################################################
################################################################################

END{

printf("\n")


#### counting atoms of types
for ( k in idlist ) {
   counteratom[idlist[k]]++
}



#### atoms and data file names



printf("# different atoms:\n")
for ( k in atomlist ) {
   filemoments[k]=sprintf("%s_%s.dat",datafileprefix,k)
   filemoments_distribution[k]=sprintf("%s_distribution_%s.dat",datafileprefix,k)
   printf("#%9s %16s %10s\n","iteration","Mmt","id") > filemoments[k]
   printf("%8s   #atoms:%-6d     data file name=%s\n",k,counteratom[k],filemoments[k])

   ### gnuplot file
   printf("set title \"moments %s\"\n",k)                  > gnuplotfile
   printf("set xlabel \"iteration\"\n")                    > gnuplotfile
   printf("set ylabel \"moment %s [{\\/Symbol m}B ]\"\n",k) > gnuplotfile
   printf("plot \\\n")                                     > gnuplotfile
   printf("\"%s\" w l t \"\" \n",filemoments[k])           > gnuplotfile
   printf("pause -1\n")                                    > gnuplotfile
   printf("set terminal postscript eps enhanced color lw 1 solid \"Helvetica\" 18\n") > gnuplotfile
   printf("set out \"%s.eps\"\n",filemoments[k])           > gnuplotfile
   printf("replot\n")                                      > gnuplotfile
   printf("set term pop\n\n\n")                            > gnuplotfile

}






################################################################################
### write data file
nid = asorti(idlistnum, idlistnumsort)
nit = asorti(iterationlist, iterationlistsort)

for (idd = 1; idd <= nid; idd++) {
    atomid=idlistnum[idlistnumsort[idd]]
    atomname=idlist[atomid]

    for (idt = 1; idt <= nit; idt++) {
        iterid=iterationlist[iterationlistsort[idt]]
#        printf("ind2=%s %s %s\n",iterationlistsort[idt],idt, iterid)
        
        printf("%10d %16.8E %10d\n",iterid,momentlist[atomid,iterid],atomid ) > filemoments[atomname]
    } 
    # loop over iterations 

    printf("\n\n") > filemoments[atomname]


#    printf("ind=%s %s %s\n",idlistnumsort[idd],idd, atomid)
} # loop over ids 


################################################################################
### global data min/max per atom, redefine (*1.1) interval for plotting distribution of moments
printf("\n")
for ( k in atomlist ) {
   delta=sprintf("%s",globalMax[k]-globalMin[k])
   mid=sprintf("%s",(globalMax[k]+globalMin[k])/2.0)
   printf("global min/max for %4s: %16.8f %16.8f  delta=%16.8f\n",k,globalMin[k],globalMax[k],delta) 
   globalMin[k]=(mid-0.6*delta)
   globalMax[k]=(mid+0.6*delta)
}
printf("\n")




################################################################################
### averaged moments
printf("calculating average moments\n")
file_av_moments=sprintf("%s_av_moments.dat",datafileprefix)
ts=""
idd=1
ts=sprintf("# iteration[%d]",idd)
ts=sprintf("%-16s",ts)

printf("\n\n") > gnuplotfile
printf("set title \"average local moments\"\n") > gnuplotfile
printf("set xlabel \"iteration\"\n") > gnuplotfile
printf("set ylabel \"average local moment [{\\/Symbol m}B ]\" \n") > gnuplotfile
printf("plot \\\n") > gnuplotfile

for ( k in atomlist ) {
   idd++
   ts1=sprintf("%s[%d]",k,idd)
   ts=sprintf("%s %16s",ts,ts1)
   if (idd > 2) {printf(", \\\n") > gnuplotfile }
   printf("\"%s\" u 1:%d w l t \"%s\" ",file_av_moments,idd,k) > gnuplotfile
}
printf("%s\n",ts) > file_av_moments


################################################################################
### average moments per iteration

   for (idt = 1; idt <= nit; idt++) {
      iterid=iterationlist[iterationlistsort[idt]]

      for ( k in atomlist ) {
         nnn[k]=0
         avmoments[k]=0
      }

      for (idd = 1; idd <= nid; idd++) {
         atomid=idlistnum[idlistnumsort[idd]]
         atomname=idlist[atomid]
         if ( momentlist[atomid,iterid] != "" ) { 
             avmoments[atomname]=avmoments[atomname]+momentlist[atomid,iterid]
             nnn[atomname]++
         }
      } # loop over ids 

     ts=sprintf("%-16d",iterid)
     for ( k in atomlist ) {
       if (nnn[k] > 0 ) { avmoments[k]=avmoments[k]/nnn[k]  }
       ts=sprintf("%s %16.8E",ts,avmoments[k])
     } # loop over atoms
     printf("%s\n",ts) > file_av_moments
      

###      printf("%10d %16.8E %10d\n",iterid,momentlist[atomid,iterid],atomid ) > filemoments[atomname]
   } # loop over iterations 




################################################################################
### averaged moment per type of last iteration
ts=""
idd=1
ts=sprintf("# moment[%d]",idd)
ts=sprintf("%-16s",ts)

idd++
ts1=sprintf("iteration[%d]",idd)
ts=sprintf("%s %16s",ts,ts1)



delete moments_in_bins
for ( k in atomlist ) {
   nnn[k]=0
   avmoments[k]=0
}

for (idd = 1; idd <= nid; idd++) {
    atomid=idlistnum[idlistnumsort[idd]]
    atomname=idlist[atomid]
    if ( momentlist[atomid,lastiteration] != "" ) { 
       avmoments[atomname]=avmoments[atomname]+momentlist[atomid,lastiteration]
       iiii=sprintf("%d",(momentlist[atomid,lastiteration]-globalMin[atomname])/(globalMax[atomname]-globalMin[atomname])*nbins)  # 0<m<nbins
#       printf("%s iiii=%s\n",atomname,iiii)
       moments_in_bins[atomname,iiii]++
       nnn[atomname]++
    }
} # loop over ids 

   printf("\n")
for ( k in atomlist ) {
   if (nnn[k] > 0 ) {
   avmoments[k]=avmoments[k]/nnn[k]
   if ( nnn[k] > 1 ) {pll="s"} else {pll=" "}
   printf("last iteration avaerage moment of %-4s: %16.8f      [%6d atom%1s]\n",k,avmoments[k],nnn[k],pll)

#   moments_in_bins[k]=moments_in_bins[k]/nnn[k]  # ???
   for (ix = 1; ix <= nbins; ix++) { 
     xx=globalMin[k]+(globalMax[k]-globalMin[k])*ix/nbins
     printf("%16.9f %8d %16.8f\n",xx,lastiteration,moments_in_bins[k,ix]/nnn[k]) > filemoments_distribution[k]
   }
   }

}
### end for last iteration

################################################################################
### gnuplot: rest for average moments plot
   printf("\npause -1\n")                                  > gnuplotfile
   printf("set terminal postscript eps enhanced color lw 1 solid \"Helvetica\" 18\n") > gnuplotfile
   printf("set out \"%s.eps\"\n",file_av_moments)          > gnuplotfile
   printf("replot\n")                                      > gnuplotfile
   printf("set term pop\n\n\n")                            > gnuplotfile



################################################################################
### gnuplot moment distribution last iteration
################################################################################
for ( k in atomlist ) {   xxxMin=min(xxxMin, globalMin[k] ) ; xxxMax=max(xxxMax, globalMax[k] ) }

printf("\n\n") > gnuplotfile
printf("set title \"moment distribution\"\n") > gnuplotfile
printf("set xlabel \"moment [{\\/Symbol m}B ]\"\n") > gnuplotfile
printf("set ylabel \" \" \n") > gnuplotfile
printf("set xrange  [%f:%f] \n",xxxMin,xxxMax) > gnuplotfile
printf("set x2range [%f:%f] \n",xxxMin,xxxMax) > gnuplotfile
printf("set x2tics (") > gnuplotfile 
idd=0
for ( k in atomlist ) {
   idd++
   if (idd>1) {printf(", ") > gnuplotfile }
   printf("\"%s\" %.3f",k,avmoments[k]) > gnuplotfile
}
#"0.5" 0.5, "1.2" 1.2, "2.3" 2.3
printf(")\n") > gnuplotfile

printf("set grid noxtics x2tics\n") > gnuplotfile

printf("plot \\\n") > gnuplotfile

idd=1
for ( k in atomlist ) {
   idd++
   ts1=sprintf("%s[%d]",k,idd)
   ts=sprintf("%s %16s",ts,ts1)
   if (idd > 2) {printf(", \\\n") > gnuplotfile }
   printf("\"%s\" u 1:%d w l t \"%s\" ",filemoments_distribution[k],3,k) > gnuplotfile
}
   printf("\npause -1\n")                                  > gnuplotfile
   printf("set terminal postscript eps enhanced color lw 1 solid \"Helvetica\" 18\n") > gnuplotfile
   printf("set out \"%s%s.eps\"\n",datafileprefix,"_moment_distribution")            > gnuplotfile
   printf("replot\n")                                      > gnuplotfile
   printf("set term pop\n\n\n")                            > gnuplotfile
   printf("unset grid\n") > gnuplotfile


################################################################################


}
'




###############################################################################
###############################################################################
###############################################################################
###############################################################################

echo ""
echo "#data can be plotted with gnuplot:"
echo "gnuplot $GNUPLOTFILE"

#which gnuplot && gnuplot $GNUPLOTFILE
